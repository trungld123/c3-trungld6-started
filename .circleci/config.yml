version: "2.1"
orbs:
  slack: circleci/slack@4.1

commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id:
        type: string
    steps:
      - run: |
          echo "Distroy environment: ${CIRCLE_WORKFLOW_ID:0:7}"

  # Exercise - Rollback
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "Distroy environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name InitialStack-${OldWorkflowID}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=1
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: A05F7QZAHNX
          event: fail
          template: basic_fail_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: A05F7QZAHNX
          event: fail
          template: basic_fail_1
  #test
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Run backend scan for project
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Create the Infrastructure backend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: echo IPEC
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ipec2.txt
            cat ipec2.txt

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - ipec2.txt
      - run:
          name: Create the Infrastructure frontend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible
      - add_ssh_keys:
          fingerprints: ["3a:4a:f0:9a:92:e4:52:30:8f:95:72:3a:b5:cc:cb:c3"]
      - run:
          name: Install dependencies - Install Ansible
          command: |
            apk add --update ansible
            apk add --no-cache tar
            pip install --upgrade awscli
            apk add --no-cache npm
            apk add --no-cache curl
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            cat ipec2.txt >> inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      ### DISTROY WHEN FAIL
      - destroy-environment
      - revert-migrations

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            echo  https://kvdb.io/KjmQczJk8bmTy6nU33a8NR/migration_${CIRCLE_WORKFLOW_ID:0:7}
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/KjmQczJk8bmTy6nU33a8NR/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      # Rollback if fail
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3a:4a:f0:9a:92:e4:52:30:8f:95:72:3a:b5:cc:cb:c3"]
      - run:
          name: Install dependencies - Install Ansible
          command: |
            apk add --update ansible
            apk add --no-cache tar
            pip install --upgrade awscli
            apk add --no-cache npm
            apk add --no-cache curl
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Deploy backend
          command: |
            cat .circleci/ansible/ipec2.txt >> .circleci/ansible/inventory.txt
            cd backend
            npm i
            npm run build
            cd ..
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} >> "backend/.env"
            echo TYPEORM_ENTITIES=${TYPEORM_ENTITIES} >> "backend/.env"
            echo TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS} >> "backend/.env"
            echo TYPEORM_HOST=${TYPEORM_HOST} >> "backend/.env"
            echo TYPEORM_PORT=${TYPEORM_PORT} >> "backend/.env"
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> "backend/.env"
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> "backend/.env"
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> "backend/.env"
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Rollback if fail
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies - Install Ansible
          command: |
            yum install -y curl tar nodejs npm gzip
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Frontend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "-----------Frontend test passed---------"
            else
              echo "-----------Frontend test failed---------"
            fi
      - run:
          name: "Backend smoke test"
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "-----------Backend test passed---------"
            else
              echo "-----------Backend test failed---------"
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar nodejs npm gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --stack-name "InitialStack-${OldWorkflowID}" \
             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            # echo OldWorkflowID: "${OldWorkflowID}"
            # echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"      
            # export STACKS=($(aws cloudformation list-stacks \
            #   --query "StackSummaries[*].StackName" \
            #   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            # echo Stack names: "${STACKS[@]}"  
            # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            # then
            #   echo "----------your stack to delete----------------"
            #   aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            # else 
            #   echo "----------not found stack delete-----------"
            # fi
      - destroy-environment
      - revert-migrations
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only:
                - main
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only:
                - main
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - main
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - main
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
          filters:
            branches:
              only:
                - main
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only:
                - main
